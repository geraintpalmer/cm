\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k+kn}{import} \PYG{n+nn}{numpy} \PYG{k+kn}{as} \PYG{n+nn}{np}
\PYG{k+kn}{import} \PYG{n+nn}{random}

\PYG{k}{class} \PYG{n+nc}{AdvertisingCampaign}\PYG{p}{:}
    \PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{    A Class to create an AdvertisingCampaign object.}
\PYG{l+s+sd}{    Holds information about the cities and their adjacency matrix.}
\PYG{l+s+sd}{    Contains methods to minimise the number of cities required to cover}
\PYG{l+s+sd}{    the set.}
\PYG{l+s+sd}{    \PYGZdq{}\PYGZdq{}\PYGZdq{}}
    \PYG{k}{def} \PYG{n+nf+fm}{\PYGZus{}\PYGZus{}init\PYGZus{}\PYGZus{}}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{,} \PYG{n}{cities}\PYG{p}{,} \PYG{n}{adj\PYGZus{}matrix}\PYG{p}{):}
        \PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{        Initialises the object.}
\PYG{l+s+sd}{        \PYGZdq{}\PYGZdq{}\PYGZdq{}}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{cities} \PYG{o}{=} \PYG{n}{cities}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{number\PYGZus{}of\PYGZus{}cities} \PYG{o}{=} \PYG{n+nb}{len}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{cities}\PYG{p}{)}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{adj\PYGZus{}matrix} \PYG{o}{=} \PYG{n}{adj\PYGZus{}matrix}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{best\PYGZus{}score} \PYG{o}{=} \PYG{n+nb}{len}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{cities}\PYG{p}{)}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{best\PYGZus{}solution} \PYG{o}{=} \PYG{n}{np}\PYG{o}{.}\PYG{n}{array}\PYG{p}{([}\PYG{l+m+mi}{1}\PYG{p}{]} \PYG{o}{*}  \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{number\PYGZus{}of\PYGZus{}cities}\PYG{p}{)}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{num\PYGZus{}broadcasts\PYGZus{}to\PYGZus{}try} \PYG{o}{=} \PYG{n}{np}\PYG{o}{.}\PYG{n}{linalg}\PYG{o}{.}\PYG{n}{matrix\PYGZus{}rank}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{adj\PYGZus{}matrix}\PYG{p}{)}

    \PYG{k}{def} \PYG{n+nf}{evalutate\PYGZus{}solution}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{,} \PYG{n}{solution}\PYG{p}{):}
        \PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{        Gives a score to a potential solution.}
\PYG{l+s+sd}{        If solution leaves any city out, returns self.number\PYGZus{}of\PYGZus{}cities,}
\PYG{l+s+sd}{        otherwise it returns the number of cities used for broadcasts.}
\PYG{l+s+sd}{        \PYGZdq{}\PYGZdq{}\PYGZdq{}}
        \PYG{n}{coverage} \PYG{o}{=} \PYG{n}{np}\PYG{o}{.}\PYG{n}{matmul}\PYG{p}{(}\PYG{n}{solution}\PYG{p}{,} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{adj\PYGZus{}matrix}\PYG{p}{)}
        \PYG{k}{if} \PYG{l+m+mi}{0} \PYG{o+ow}{in} \PYG{n}{coverage}\PYG{p}{:}
            \PYG{k}{return} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{number\PYGZus{}of\PYGZus{}cities}
        \PYG{k}{return} \PYG{n+nb}{sum}\PYG{p}{(}\PYG{n}{solution}\PYG{p}{)}

    \PYG{k}{def} \PYG{n+nf}{new\PYGZus{}solution}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{):}
        \PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{        Randomly generate a new potential solution}
\PYG{l+s+sd}{        with self.number\PYGZus{}broadcasts\PYGZus{}to\PYGZus{}try broadcasts.}
\PYG{l+s+sd}{        \PYGZdq{}\PYGZdq{}\PYGZdq{}}
        \PYG{n}{number\PYGZus{}empty} \PYG{o}{=} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{number\PYGZus{}of\PYGZus{}cities} \PYG{o}{\PYGZhy{}} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{num\PYGZus{}broadcasts\PYGZus{}to\PYGZus{}try}
        \PYG{n}{sol} \PYG{o}{=} \PYG{p}{[}\PYG{l+m+mi}{1}\PYG{p}{]} \PYG{o}{*} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{num\PYGZus{}broadcasts\PYGZus{}to\PYGZus{}try} \PYG{o}{+} \PYG{p}{[}\PYG{l+m+mi}{0}\PYG{p}{]} \PYG{o}{*} \PYG{n}{number\PYGZus{}empty}
        \PYG{n}{random}\PYG{o}{.}\PYG{n}{shuffle}\PYG{p}{(}\PYG{n}{sol}\PYG{p}{)}
        \PYG{k}{return} \PYG{n}{np}\PYG{o}{.}\PYG{n}{array}\PYG{p}{(}\PYG{n}{sol}\PYG{p}{)}

    \PYG{k}{def} \PYG{n+nf}{optimise}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{,} \PYG{n}{num\PYGZus{}itrs}\PYG{p}{):}
        \PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{        For num\PYGZus{}itrs iterations, keep generating random potential}
\PYG{l+s+sd}{        solutions with self.number\PYGZus{}broadcasts\PYGZus{}to\PYGZus{}try broadcasts. If solution}
\PYG{l+s+sd}{        is valid, reduce the number of broadcasts to try by 1. Keep track}
\PYG{l+s+sd}{        of best solution.}
\PYG{l+s+sd}{        \PYGZdq{}\PYGZdq{}\PYGZdq{}}
        \PYG{k}{for} \PYG{n}{iteration} \PYG{o+ow}{in} \PYG{n+nb}{range}\PYG{p}{(}\PYG{n}{num\PYGZus{}itrs}\PYG{p}{):}
            \PYG{n}{solution} \PYG{o}{=} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{new\PYGZus{}solution}\PYG{p}{()}
            \PYG{n}{score} \PYG{o}{=} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{evalutate\PYGZus{}solution}\PYG{p}{(}\PYG{n}{solution}\PYG{p}{)}
            \PYG{k}{if} \PYG{n}{score} \PYG{o}{\PYGZlt{}=} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{best\PYGZus{}score}\PYG{p}{:}
                \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{best\PYGZus{}solution} \PYG{o}{=} \PYG{n}{solution}
                \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{best\PYGZus{}score} \PYG{o}{=} \PYG{n}{score}
                \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{num\PYGZus{}broadcasts\PYGZus{}to\PYGZus{}try} \PYG{o}{=} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{best\PYGZus{}score} \PYG{o}{\PYGZhy{}} \PYG{l+m+mi}{1}

    \PYG{k}{def} \PYG{n+nf}{print\PYGZus{}solution}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{):}
        \PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{        Prints out the best solution.}
\PYG{l+s+sd}{        \PYGZdq{}\PYGZdq{}\PYGZdq{}}
        \PYG{k}{for} \PYG{n}{i}\PYG{p}{,} \PYG{n}{city} \PYG{o+ow}{in} \PYG{n+nb}{enumerate}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{cities}\PYG{p}{):}
            \PYG{k}{if} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{best\PYGZus{}solution}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]} \PYG{o}{==} \PYG{l+m+mi}{1}\PYG{p}{:}
                \PYG{k}{print}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{cities}\PYG{p}{[}\PYG{n}{i}\PYG{p}{])}



\PYG{k}{with} \PYG{n+nb}{open}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}french\PYGZus{}cities.txt\PYGZsq{}}\PYG{p}{,} \PYG{l+s+s1}{\PYGZsq{}r\PYGZsq{}}\PYG{p}{)} \PYG{k}{as} \PYG{n}{f}\PYG{p}{:}
    \PYG{n}{cities} \PYG{o}{=} \PYG{n}{f}\PYG{o}{.}\PYG{n}{read}\PYG{p}{()}
    \PYG{n}{cities\PYGZus{}list} \PYG{o}{=} \PYG{n}{cities}\PYG{o}{.}\PYG{n}{split}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}}\PYG{l+s+se}{\PYGZbs{}n}\PYG{l+s+s1}{\PYGZsq{}}\PYG{p}{)}
\PYG{n}{adjacency\PYGZus{}matrix} \PYG{o}{=} \PYG{n}{np}\PYG{o}{.}\PYG{n}{genfromtxt}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}french\PYGZus{}distances.csv\PYGZsq{}}\PYG{p}{,} \PYG{n}{delimiter}\PYG{o}{=}\PYG{l+s+s1}{\PYGZsq{},\PYGZsq{}}\PYG{p}{)}


\PYG{n}{random}\PYG{o}{.}\PYG{n}{seed}\PYG{p}{(}\PYG{l+m+mi}{0}\PYG{p}{)}
\PYG{n}{R} \PYG{o}{=} \PYG{n}{AdvertisingCampaign}\PYG{p}{(}\PYG{n}{cities\PYGZus{}list}\PYG{p}{,} \PYG{n}{adjacency\PYGZus{}matrix}\PYG{p}{)}
\PYG{n}{R}\PYG{o}{.}\PYG{n}{optimise}\PYG{p}{(}\PYG{l+m+mi}{10000}\PYG{p}{)}
\PYG{n}{R}\PYG{o}{.}\PYG{n}{print\PYGZus{}solution}\PYG{p}{()}
\end{Verbatim}
